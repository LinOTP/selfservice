variables:
  IMAGE_NAME: linotp/ng-selfservice
  DOCKERTAG_COMMIT_SHA: $REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_SHA
  DOCKERTAG_GIT_TAG: $REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_TAG
  DEV_REPO_URL: http://avocado.corp.lsexperts.de/deb-repo
  LANG: C.UTF-8
  EMAIL: "KeyIdentity GmbH <packaging@keyidentity.com>"

  # Merges / tags to this branch trigger uploads
  GITBOX_CI_UPLOAD_BRANCHES: '/^(branch-v|master)/'

  # Tags to these release branches trigger golden repo uploads
  GITBOX_CI_RELEASE_TAGS: '/^release/'
  GITBOX_CI_GOLDEN_RELEASES: '/^buster$/'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'                 # Execute nightly jobs
    - if: $CI_MERGE_REQUEST_ID                              # Execute jobs in merge request context
    - if: '$CI_COMMIT_BRANCH =~ $GITBOX_CI_UPLOAD_BRANCHES' # Execute jobs when a new commit is pushed to upload branch

.release-rules: &release-rules
  rules:
    # Release tags are uploaded as final package
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $GITBOX_CI_RELEASE_TAGS && ($DEBIAN_RELEASE_NAME == null || $DEBIAN_RELEASE_NAME =~ $GITBOX_CI_GOLDEN_RELEASES)'
      when: always

.branch-rules: &branch-rules
  rules:
    # Do no not upload nightly jobs
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: never
    # Release tags are uploaded via &release-rules
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ $GITBOX_CI_RELEASE_TAGS && ($DEBIAN_RELEASE_NAME == null || $DEBIAN_RELEASE_NAME =~ $GITBOX_CI_GOLDEN_RELEASES)'
      when: never
    # Auto upload if merged to upload branch
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH =~ $GITBOX_CI_UPLOAD_BRANCHES'
      when: always
    # Otherwise allow manual upload from branch
    - when: manual
      allow_failure: true
cache:
  paths:
    - node_modules


stages:
  - test
  - build
  - deploy

### Run before merge ###

tslint:
  stage: test
  image: node:10-stretch
  before_script:
    - yarn install --frozen-lockfile
  script:
    - yarn lint

unit-tests:
  stage: test
  image: docker.repos.corp.keyidentity.com/gitlab-images/node-chrome:12-stretch
  before_script:
    - yarn install --frozen-lockfile
  script:
    - yarn test:ci-no-sandbox
  coverage: /Branches\s+:\s+\d+\.?\d*%/

build:dist:
  stage: build
  image: node:10-stretch
  before_script:
    - yarn install --frozen-lockfile
  script:
    - yarn build
  artifacts:
    paths:
      - dist/

build:docker-image:
  stage: build
  image: docker:latest
  script:
    - docker build -t $DOCKERTAG_COMMIT_SHA .
    - docker rmi $DOCKERTAG_COMMIT_SHA

.build-debs:
  stage: build
  image: debian:${DEBIAN_RELEASE_NAME}
  before_script:
    - apt-get update
    - apt-get install --yes --no-install-recommends devscripts build-essential equivs git-buildpackage lsb-release ca-certificates apt-transport-https gnupg curl
    - curl -sS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor > /etc/apt/trusted.gpg.d/nodesource.gpg
    - echo 'deb https://deb.nodesource.com/node_10.x stretch main' > /etc/apt/sources.list.d/nodesource.list
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/yarnpkg.gpg
    - echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list
    - apt-get update
  script:
    - ci/update-debian-changelog
    - mk-build-deps --install --remove --tool "apt-get --yes --no-install-recommends" debian/control
    - debuild -us -uc -b
    - mkdir -p artifacts
    - dcmd mv ../*.changes artifacts/
    - echo "$CI_JOB_ID" > artifacts/"$DEBIAN_RELEASE_NAME"_build_job_id.txt
  artifacts:
    paths:
      - artifacts/

build:buster:
  extends: .build-debs
  variables:
    DEBIAN_RELEASE_NAME: buster

.before_upload: &before_upload
  before_script:
    - test -z "${DEV_REPO_HOST}" && exit 1 # abort early if variable isn't set
    - test -z "${DEV_REPO_KNOWN_HOSTS}" && exit 1 # abort early if variable isn't set
    - test -z "${DEV_REPO_SSH_SUBMIT_KEY}" && exit 1 # abort early if variable isn't set
    - apt-get update && apt-get install -y --no-install-recommends devscripts openssh-client # install dependencies
    - eval $(ssh-agent -s)
    - echo "$DEV_REPO_SSH_SUBMIT_KEY" | tr -d '\r' | ssh-add - >/dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "CheckHostIP no" >>~/.ssh/config
    - echo "$DEV_REPO_KNOWN_HOSTS" >~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - export BUILD_JOB_ID=$(cat artifacts/"$DEBIAN_RELEASE_NAME"_build_job_id.txt)

.upload-debs:
  stage: deploy
  image: debian:latest
  <<: *branch-rules
  <<: *before_upload
  script:
    - find artifacts -ls
    # Pull artifacts into every interesting distribution
    - sleep 10
    - for REPO in $REPOS; do ssh debs@$DEV_REPO_HOST repo-tool gpull $REPO "$CI_PROJECT_PATH" --jobid "$BUILD_JOB_ID"; done
  variables:
    REPOS: linotp3

upload:buster:
  extends: .upload-debs
  variables:
    DEBIAN_RELEASE_NAME: buster

upload:docker-image:
  stage: deploy
  image: docker:latest
  <<: *branch-rules
  script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker build -t $DOCKERTAG_COMMIT_SHA .
    - docker push $DOCKERTAG_COMMIT_SHA

upload:docker-image-golden:
  stage: deploy
  image: docker:latest
  <<: *release-rules
  script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker build -t $DOCKERTAG_COMMIT_SHA -t $DOCKERTAG_GIT_TAG .
    - docker push $DOCKERTAG_COMMIT_SHA
    - docker push $DOCKERTAG_GIT_TAG

# Copy packages to golden repo if they have a `release` tag.
# Note that this must come after `upload-debs`.
.upload-to-golden:
  stage: deploy
  image: debian:latest
  <<: *release-rules
  <<: *before_upload
  script:
    - for REPO in $REPOS; do ssh debs@$DEV_REPO_HOST repo-tool gpull ${REPO}-golden "$CI_PROJECT_PATH" --jobid "$BUILD_JOB_ID"; done
  variables:
    REPOS: linotp3

upload-golden-debs:buster:
  extends: .upload-to-golden
  variables:
    DEBIAN_RELEASE_NAME: buster
