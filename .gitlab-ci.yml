variables:
  IMAGE_NAME: linotp/ng-selfservice
  DOCKERTAG_COMMIT_SHA: $REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_SHA
  DOCKERTAG_GIT_TAG: $REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_TAG
  DEV_REPO_URL: http://avocado.corp.lsexperts.de/deb-repo
  LANG: C.UTF-8
  EMAIL: "KeyIdentity GmbH <packaging@keyidentity.com>"


cache:
  untracked: true
  paths:
    - .yarn_cache
    - node_modules


stages:
  - test
  - build
  - deploy

### Run before merge ###

typescript lint:
  stage: test
  image: node:10-stretch
  before_script:
    - yarn config set cache-folder $PWD/.yarn_cache
    - yarn install --frozen-lockfile
  script:
    - yarn lint

unit tests:
  stage: test
  image: docker.repos.corp.keyidentity.com/gitlab-images/node-chrome:10-stretch
  before_script:
    - yarn config set cache-folder $PWD/.yarn_cache
    - yarn install --frozen-lockfile
  script:
    - yarn test:ci-no-sandbox
  coverage: /Branches\s+:\s+\d+\.?\d*%/

build dist:
  stage: build
  image: node:10-stretch
  before_script:
    - yarn config set cache-folder $PWD/.yarn_cache
    - yarn install --frozen-lockfile
  script:
    - yarn build
  artifacts:
    expire_in: 1 week
    paths:
      - dist/

.build-debs:
  stage: build
  image: debian:${DEBIAN_RELEASE_NAME}
  before_script:
    - apt-get update
    - apt-get install --yes --no-install-recommends devscripts build-essential equivs git-buildpackage lsb-release ca-certificates apt-transport-https gnupg curl
    - curl -sS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | gpg --dearmor > /etc/apt/trusted.gpg.d/nodesource.gpg
    - echo 'deb https://deb.nodesource.com/node_10.x stretch main' > /etc/apt/sources.list.d/nodesource.list
    - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/yarnpkg.gpg
    - echo 'deb https://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list
    - apt-get update
    - apt-get install --yes --no-install-recommends yarn nodejs
    - yarn config set cache-folder $PWD/.yarn_cache
  script:
    - ci/update-debian-changelog
    - mk-build-deps --install --remove --tool "apt-get --yes --no-install-recommends" debian/control
    - debuild -us -uc -b
    - mkdir -p artifacts
    - dcmd mv ../*.changes artifacts/

  artifacts:
    paths:
      - artifacts/
    expire_in: 4 weeks

build docker image:
  stage: build
  image: docker:latest
  script:
    - docker build -t $DOCKERTAG_COMMIT_SHA .
    - docker rmi $DOCKERTAG_COMMIT_SHA

build jessie packages:
  extends: .build-debs
  variables:
    DEBIAN_RELEASE_NAME: jessie

build stretch packages:
  extends: .build-debs
  variables:
    DEBIAN_RELEASE_NAME: stretch

build buster packages:
  extends: .build-debs
  variables:
    DEBIAN_RELEASE_NAME: buster

.upload-debs:
  stage: deploy
  image: debian:latest
  before_script:
    - test -z "${DEV_REPO_HOST}" && exit 1 # abort early if variable isn't set
    - test -z "${DEV_REPO_KNOWN_HOSTS}" && exit 1 # abort early if variable isn't set
    - test -z "${DEV_REPO_SSH_SUBMIT_KEY}" && exit 1 # abort early if variable isn't set
    - apt-get update && apt-get install -y --no-install-recommends devscripts openssh-client # install dependencies
    - eval $(ssh-agent -s)
    - echo "$DEV_REPO_SSH_SUBMIT_KEY" | tr -d '\r' | ssh-add - >/dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "CheckHostIP no" >>~/.ssh/config
    - echo "$DEV_REPO_KNOWN_HOSTS" >~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - find artifacts -ls
    - dcmd scp artifacts/*.changes dists@$DEV_REPO_HOST:deb-repo/incoming

# Allow a manual upload of packages directly from a pipeline for testing
upload debian packages (manual):
  extends: .upload-debs
  when: manual
  except:
   - schedules

# Upload packages automatically when merged into master, and for tags
upload debian packages (automatic):
  extends: .upload-debs
  only:
    - tags
    - master
  except:
    - schedules

# Allow a manual upload of the docker image directly from a pipeline for testing
upload docker image (manual):
  stage: deploy
  image: docker:latest
  script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker build -t $DOCKERTAG_COMMIT_SHA .
    - docker push $DOCKERTAG_COMMIT_SHA
  when: manual
  except:
    - schedules

# Upload docker image automatically when merged into master
upload docker image (automatic):
  stage: deploy
  image: docker:latest
  script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker build -t $DOCKERTAG_COMMIT_SHA .
    - docker push $DOCKERTAG_COMMIT_SHA
  only:
    - master
  except:
    - schedules

# Upload docker image for tags
upload docker image (release):
  stage: deploy
  image: docker:latest
  script:
    - docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASSWORD $REGISTRY_URL
    - docker build -t $DOCKERTAG_COMMIT_SHA -t $DOCKERTAG_GIT_TAG .
    - docker push $DOCKERTAG_COMMIT_SHA $DOCKERTAG_GIT_TAG
  only:
    - tags
