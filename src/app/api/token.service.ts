import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';

import { Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';

import { SessionService } from '../auth/session.service';
import { Token, TokenType, tokenTypeDetails, TokenTypeDetails, unknownTokenTypeDetail } from './token';
import { LinOTPResponse } from './api';
import { NotificationService } from '../common/notification.service';


@Injectable({
  providedIn: 'root'
})
export class TokenService {

  private userserviceBase = `/userservice/`;
  private userserviceEndpoints = {
    tokens: 'usertokenlist',
    serialByOTP: 'getSerialByOtp',
  };

  constructor(
    private http: HttpClient,
    private sessionService: SessionService,
    private notificationService: NotificationService,
  ) { }

  getTokens(): Observable<Token[]> {
    const url = this.userserviceBase + this.userserviceEndpoints.tokens;
    return this.http.get<LinOTPResponse<any[]>>(url, { params: { session: this.sessionService.getSession() } }).pipe(
      map(res => res.result.value.map(t => this.mapBackendToken(t))),
      catchError(this.handleError('getting tokens failed', []))
    );
  }

  getToken(serial: string): Observable<Token> {
    return this.getTokens().pipe(
      map(tokens => tokens.find(t => t.serial === serial)),
    );
  }

  mapBackendToken(token: any): Token {
    const t = new Token(
      token['LinOtp.TokenId'],
      token['LinOtp.TokenSerialnumber'],
      this.getTypeDetails(token['LinOtp.TokenType']),
      token['LinOtp.Isactive'],
      token['LinOtp.TokenDesc']
    );
    t.enrollmentStatus = token['Enrollment']['status'] === 'completed' ? 'completed' : token['Enrollment']['detail'];
    return t;
  }

  getTypeDetails(type: TokenType | 'assign'): TokenTypeDetails {
    return tokenTypeDetails.find(td => td.type === type.toLowerCase()) || unknownTokenTypeDetail;
  }

  getEnrollableTypes(): TokenTypeDetails[] {
    return tokenTypeDetails.filter(t => t.enrollmentPermission);
  }

  /**
   * Request a token's serial from the backend given an OTP generated by that token.
   *
   * @param {string} otp the otp generated by the token
   * @returns {Observable<string>} an observable of the token serial
   * @memberof TokenService
   */
  getSerialByOTP(otp: string): Observable<string> {
    const url = this.userserviceBase + this.userserviceEndpoints.serialByOTP;
    const params = {
      session: this.sessionService.getSession(),
      otp,
    };
    return this.http.get<LinOTPResponse<{ serial: string }>>(url, { params }).pipe(
      map(t => t.result.value.serial))
      .pipe(
        catchError(this.handleError('retrieving token serial failed', null))
      );
  }

  private handleError<T>(operation = 'operation', result?: T) {
    return (error: any): Observable<T> => {
      this.notificationService.message($localize`Error: ${operation}. Please try again or contact an administrator`);
      return of(result as T);
    };
  }
}
