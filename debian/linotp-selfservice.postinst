#!/bin/sh

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see https://www.debian.org/doc/debian-policy/ or
# the debian-policy package

set -e

check_apache_module() {
  # Check the status of a dependency module and enable or warn the
  # user, depending on the system configuration
  local module=$1

  if ! which a2query >/dev/null ; then
    echo "Could not find a2query - module check skipped"
    return 0
  fi

  local ret=0
  a2query -q -m $module || ret=$?
  if [ $ret -eq 32 -o $ret -eq 1 ] ; then
    # Module was disabled by administrator or is not available

    if dpkg-query --status lseappliance >/dev/null 2>&1 ; then
      # If we are running on the SVA2, the module was disabled by
      # the installation script and we must force reenable the
      # module
      a2enmod -q $module
    else
      # The user deliberately disabled this module so the
      # package installation could fail
      echo "Warning: apache module $module was disabled."
      echo "If the installation fails, you can enable the"
      echo "module using the command:"
      echo
      echo "  a2enmod $module"
    fi
  fi
}

case "$1" in
    configure)
        check_apache_module rewrite
        check_apache_module dir
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
